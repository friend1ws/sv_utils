#! /usr/bin/env python

from sv_utils.run import *
import argparse

parser = argparse.ArgumentParser(prog = "sv_utils")

parser.add_argument("--version", action = "version", version = "sv_utils-0.1.0")

subparsers = parser.add_subparsers()

parser.add_argument("--fisher_thres", default = 1.0, type = float,
                   help = "remove if the - log(fisher p-value) is smaller than this value")

parser.add_argument("--tumor_freq_thres", default = 0.07, type = float,
                   help = "remove if the tumor allele frequency is small than this value")

parser.add_argument("--normal_freq_thres", default = 0.05, type = int,
                   help = "remove if the normal allele frequency is larger than this value")

parser.add_argument("--normal_depth_thres", default = 10, type = float,
                   help = "remove if the normal read depth is smaller than this value")

parser.add_argument("--inversion_size_thres", default = 500, type = int,
                   help = "remove if the size of inversion is smaller than this value")

parser.add_argument("--max_size_thres", default = None, type = int,
                   help = "remove if the size of variant is larger than this value")

parser.add_argument("--within_exon", default = False, action = "store_true",
                    help = "keep only variants within exon")


# subparsers = parser.add_subparsers()

##########
# count_summary 
count = subparsers.add_parser("count",
                              help = "summarize the frequency of each variant type (deletion, tandem_duplication, inversion, translocation) for each sample")

count.add_argument("result_list", metavar = "result_list.txt", default = None, type = str,
                    help = "1st column: sample IDs, 2nd column: tumor type, 3rd column: genomon SV result path")

count.add_argument("output", metavar = "output.txt", default = None, type = str,
                    help = "the path to the output file")

count.add_argument("annotation_dir", metavar = "annotation_dir", default = None, type = str,
                   help = "the path to the database directory")

count.set_defaults(func = count_main)

##########
# gene_summary_summary 
gene_summary = subparsers.add_parser("gene_summary",
                                     help = "summarize the frequency of each variant type (deletion, tandem_duplication, inversion, translocation) for each sample")

gene_summary.add_argument("result_list", metavar = "result_list.txt", default = None, type = str,
                          help = "1st column: sample IDs, 2nd column: tumor type, 3rd column: genomon SV result path")

gene_summary.add_argument("output", metavar = "output.txt", default = None, type = str,
                          help = "the path to the output file")

gene_summary.add_argument("annotation_dir", metavar = "annotation_dir", default = None, type = str,
                          help = "the path to the database directory")

gene_summary.add_argument("cancer_gene_list", metavar = "cancer_gene_list", default = None, type = str,
                         help = "the path to the cancer list file")

gene_summary.add_argument("--inframe_info", default = False, action = "store_true",
                         help = "add inframe information")

gene_summary.set_defaults(func = gene_summary_main)


##########
# filter
filter_parser = subparsers.add_parser("filter",
                                    help = "filter out variants outside specified conditions")

filter_parser.add_argument("result_file", metavar = "genomonSV.result.txt", default = None, type = str,
                    help = "the path to genomon SV result")

filter_parser.add_argument("output", metavar = "output.txt", default = None, type = str,
                    help = "the path to the output file")

filter_parser.add_argument("annotation_dir", metavar = "annotation_dir", default = None, type = str,
                           help = "the path to the database directory")

filter_parser.set_defaults(func = filter_main)
##########

# concentrate
concentrate_parser = subparsers.add_parser("concentrate",
                                           help = "list up concentrated variants")

concentrate_parser.add_argument("result_list", metavar = "result_list.txt", default = None, type = str,
                                help = "1st column: sample IDs, 2nd column: tumor type, 3rd column: genomon SV result path")

concentrate_parser.add_argument("output", metavar = "output.txt", default = None, type = str,
                                help = "the path to the output file")

concentrate_parser.add_argument("annotation_dir", metavar = "annotation_dir", default = None, type = str,
                                help = "the path to the database directory")

concentrate_parser.add_argument("--set_count", metavar = "set_count", default = 2, type = int,
                                help = "extract #variants is equal or more than this value within specified margin")
 
concentrate_parser.add_argument("--set_margin", metavar = "set_margin", default = 500, type = int,
                                help = "extract #variants is equal or more than the specified threshould within this value")

concentrate_parser.set_defaults(func = concentrate_main)


##########

# merge control
merge_control = subparsers.add_parser("merge_control",
                                      help = "merge, compress and index the SV list")

merge_control.add_argument("result_list", metavar = "result_list.txt", default = None, type = str,
                           help = "1st column: sample IDs, 2nd column: tumor type, 3rd column: genomon SV result path")

merge_control.add_argument("output_prefix", default = None, type = str,
                           help = "the prefix of the output file")

merge_control.add_argument("annotation_dir", metavar = "annotation_dir", default = None, type = str,
                                help = "the path to the database directory")


merge_control.set_defaults(func = merge_control_main)

##########

args = parser.parse_args()

args.func(args)

